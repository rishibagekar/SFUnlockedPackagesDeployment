name: Pull Request Workflow for Unlocked Packages Deployment
on:
  push:
    branches: [ develop ]
    paths:
      - 'cmd-loader/main/default/**'
  pull_request:
    branches: [ develop ]
    paths:
      - 'cmd-loader/main/default/**'

jobs:
  validate_pull_request:
    name: Validation of Pull Request
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: ${{ github.head_ref }}
      TARGET_BRANCH: ${{ github.base_ref }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
            node-version: 18

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global

      - name: Dev Int Sandbox-Validation
        run: |
          echo ${{ secrets.AUTHURL_COPADOINT }} | sf org login sfdx-url -s -u
          sf project deploy validate -d cmd-loader/main/default --test-level RunAllTestsInOrg --verbose -w 20

  code_coverage_report:
    name: Apex Code Coverage Report
    needs: validate_pull_request
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Authorization to DevHub & Create Scratch Org
        run: |
          echo ${{ secrets.AUTHURL_COPADOPROD }} | sf org login sfdx-url -d -u
          sf org create scratch -f config/project-scratch-def.json -a ci_scratch -y 1

      - name: Package Version Installation on Scratch Org
        run: |
          echo ${{ secrets.AUTHURL_COPADOPROD }} | sf org login sfdx-url -d -u
          sf package version create -x -p "PackageTest" -w 60 --code-coverage
          new_version_id=$(grep -o "04t[[:alnum:]]\{15\}" sfdx-project.json | tail -n1)
          test $(sf package version report -p $new_version_id --json | jq .result.HasPassedCodeCoverageCheck) = 'true'
          sf package install -p $new_version_id -o ci_scratch -w 10 -b 10

      - name: Apex Code Coverage Report Generation
        run: |
          sf apex run test -c -r json -d ./tests/apex -o ci_scratch -w 20
          coverage=$(jq .result.summary.orgWideCoverage ./tests/apex/test-result-codecoverage.json | grep -Eo "[[:digit:]]+")
          test $coverage -ge 75

      - name: Upload Apex Code Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: apex-code-coverage
          path: tests/apex/test-result-codecoverage.json
  
      - name: Delete scratch org
        if: always()
        run: sf org delete scratch -p -o ci_scratch
        
  sonar_scan:
    name: SonarQube Scan
    needs: code_coverage_report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v2
        with:
          name: apex-code-coverage
          path: tests/apex

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  deploy_package:
    name: Unlocked Package Installation
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
            node-version: 18

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Authorize DevHub
        run: |
          echo ${{ secrets.AUTHURL_COPADOPROD }} | sf org login sfdx-url d -u

      - name: Dev Int Sandbox-Package Install
        run: |
          echo ${{ secrets.AUTHURL_COPADOPROD }} | sf org login sfdx-url -d -u
          sf package version create -x -p "PackageTest" -w 60 -b develop --code-coverage
          echo "Package Version Creation Successfull"
          new_version_id=$(grep -o "04t[[:alnum:]]\{15\}" sfdx-project.json | tail -n1)
          test $(sf package version report -d -p $new_version_id --json | jq .result.HasPassedCodeCoverageCheck) = 'true'
          echo "Apex Code Coverage Check Successfull"
          echo ${{ secrets.AUTHURL_COPADOINT }} | sf org login sfdx-url -s -u
          sf package install -p $new_version_id -o devint -w 10 -b 10
          echo "Package Version Installation on Dev Int Successfull"

      - name: Store new Package version details in sfdx-project.json file
        run: |
          sed -i -e "s/04t[[:alnum:]]\{15\}/${version_id}/" README.md
          git config user.name "release[bot]"
          git config user.email "<>"
          git add README.md
          git add sfdx-project.json
          git commit -m "Updating new pre-release version"
          git push