name: Pull Request Workflow for Unlocked Packages Deployment testing
on:
  push:
    branches: [ develop ]
    paths:
      - 'cmd-loader/main/default/**'
  pull_request:
    branches: [ develop ]
    paths:
      - 'cmd-loader/main/default/**'
      
jobs:
  validate_pull_request:
    name: Validation of Pull Request
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: ${{ github.head_ref }}
      TARGET_BRANCH: ${{ github.base_ref }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node JS
        uses: actions/setup-node@v4
        with:
            node-version: 20

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global

      - name: Dev Int Sandbox-Validation
        run: |
          echo ${{ secrets.CICD_SCRATCHORG }} | sf org login sfdx-url -s -u
          sf project deploy start -d cmd-loader/main/default --test-level RunLocalTests --verbose -w 20

      - name: Apex Code Coverage Report Generation
        run: |
          echo ${{ secrets.CICD_SCRATCHORG }} | sf org login sfdx-url -s -u
          sf apex run test -c -r json -d ./tests/apex -w 20 > test.json
          coverage=$(jq .result.summary.orgWideCoverage test.json | grep -Eo "[[:digit:]]+")
          test $coverage -ge 75

      - name: Upload Apex Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex/test-result-codecoverage.json
          retention-days: 10
        
  sonar_scan:
    name: SonarQube Scan
    needs: validate_pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  deploy_package:
    name: Unlocked Package Installation
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Github CLI
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

      - name: Get latest run Id
        id: getrunid
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_run_id=$(curl -s \
             -H "Accept: application/vnd.github+json" \
             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
             https://api.github.com/repos/${{ github.repository }}/actions/runs \
             | jq '.workflow_runs[] | select(.head_branch=="${{ github.head_ref }}") | .id' | head -n 1)
          echo "RUN_ID=$latest_run_id" >> $GITHUB_ENV
          echo "RunID=$latest_run_id"

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ env.RUN_ID }}
          name: apex-code-coverage-${{ env.RUN_ID }}
          path: tests/apex
          github-token: ${{ secrets.GH_TOKEN }}

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
