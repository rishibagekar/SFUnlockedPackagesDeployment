name: develop - Pull Request Workflow
on:
  push:
    branches: [develop]
    paths:
      - "cmd-loader/main/default/**"

  pull_request:
    branches: [develop]
    paths:
      - "cmd-loader/main/default/**"

jobs:
  validation_code_coverage:
    name: Validation & Apex Code Coverage Report
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create CICD Scratch Org & install dependent packages
        run: |
          echo ${{ secrets.CICD_SCRATCHORG }} | sf org login sfdx-url -s -u
          echo "CICD Scratch Org created successfully"
          echo "${{ secrets.CICD_SCRATCHORG }}" > sf_auth_url.txt
          cat sf_auth_url.txt

      - name: Upload auth url
        uses: actions/upload-artifact@v4
        with:
          name: auth-url
          path: sf_auth_url.txt

      - name: CICD Scratch Org-Validation & Deployment
        run: |
            echo ${{ secrets.CICD_SCRATCHORG }} | sf org login sfdx-url -s -u
            sf project deploy start -d cmd-loader/main/default --ignore-conflicts --verbose -w 30

      - name: Apex Code Coverage Report Generation
        run: |
          echo ${{ secrets.CICD_SCRATCHORG }} | sf org login sfdx-url -s -u
          sf apex run test -c -r json -d ./tests/apex -w 30 > test.json
          coverage=$(jq .result.summary.orgWideCoverage test.json | grep -Eo "[[:digit:]]+")
          test $coverage -ge 75
          echo "Apex Code Coverage Report generated successfully"
      
      - name: Upload Apex Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex/test-result-codecoverage.json

  sonarqube_scan:
    name: SonarQube Scan
    needs: validation_code_coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  install_package_cicdscratch:
    name: Unlocked Package Installation on CICD Scratch Org
    needs: [sonarqube_scan,validation_code_coverage]
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download auth url
        uses: actions/download-artifact@v4
        with:
          name: auth-url
          path: ./
          
      - name: Unlocked Package Version Installation
        run: |
          cat sf_auth_url.txt
          sf org login sfdx-url -f ./sf_auth_url.txt -a cicdScratch
          echo "McKesson-CGAT-HUB Package version installation on CICD Scratch Org succeeded"

  code_merge_develop:
    name: Code Merged from feature to develop branch
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Apex Test Classes
        id: find-test-classes
        run: |
          find force-app/main/default/classes -name '*Test.cls' -type f | xargs -n 1 basename | sed 's/.cls//' > test_classes.txt

      - name: Shared Develop Scratch Org-Validation & Deployment
        run: |
          TEST_CLASSES=$(cat test_classes.txt | tr '\n' ' ')
          echo ${{ secrets.AUTHURL_SHARED_DEVELOP_SCRATCH }} | sf org login sfdx-url -s -u
          #!/bin/bash
          if [ "$TEST_CLASSES" = "" ]; then
            sf project deploy start -d force-app/main/default --verbose -w 30
          else
            sf project deploy start -d force-app/main/default -l RunSpecifiedTests -t $TEST_CLASSES --verbose -w 30
          fi
          echo "Validation & Deployment on Shared Develop Scratch Org succeeded"

      - name: Apex Code Coverage Report Generation
        run: |
          echo ${{ secrets.AUTHURL_SHARED_DEVELOP_SCRATCH }} | sf org login sfdx-url -s -u
          sf apex run test -c -r json -d ./tests/apex -w 30 > test.json
          coverage=$(jq .result.summary.orgWideCoverage test.json | grep -Eo "[[:digit:]]+")
          test $coverage -ge 75
          echo "Apex Code Coverage Report generated successfully"

      - name: Upload Apex Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex/test-result-codecoverage.json  

  sonarqube_scan_develop:
    name: SonarQube Scan
    needs: code_merge_develop
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
