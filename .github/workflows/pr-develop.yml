name: Pull Request Workflow for Unlocked Packages Deployment testing
on:
  push:
    branches: [ develop ]
    paths:
      - 'cmd-loader/main/default/**'
  pull_request:
    branches: [ develop ]
    paths:
      - 'cmd-loader/main/default/**'

jobs:
  validate_pull_request:
    name: Validation of Pull Request
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: ${{ github.head_ref }}
      TARGET_BRANCH: ${{ github.base_ref }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node JS
        uses: actions/setup-node@v4
        with:
            node-version: 20

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global

      - name: Dev Int Sandbox-Validation
        run: |
          echo ${{ secrets.PERSONAL_DEVHUB }} | sf org login sfdx-url -d -u
          sf org create scratch -f config/project-scratch-def.json -a cicdScratch -y 1 -w 30 --name "CICDScratchOrg"
          sf project deploy start -d cmd-loader/main/default -o cicdScratch --test-level RunAllTestsInOrg --verbose -w 20

      - name: Apex Code Coverage Report Generation
        run: |
          sf apex run test -c -r json -d ./tests/apex -o cicdScratch -w 20 > test.json
          coverage=$(jq .result.summary.orgWideCoverage test.json | grep -Eo "[[:digit:]]+")
          test $coverage -ge 75

      - name: Upload Apex Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex/test-result-codecoverage.json
  
      - name: Delete scratch org
        if: always()
        run: sf org delete scratch -p -o cicdScratch
        
  sonar_scan:
    name: SonarQube Scan
    needs: validate_pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  deploy_package:
    name: Unlocked Package Installation
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v4
        with:
          name: apex-code-coverage
          path: tests/apex
          
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Setup Github CLI
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
      
      - name: Get latest merged PR
        id: get_pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST_PR=$(gh pr list $PR_NUMBER --repo ${{ github.repository }} --state merged --limit 1 --json number --jq '.[0].number')
          echo "LATEST_PR=$LATEST_PR" >> $GITHUB_ENV

      - name: Fetch PR details
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_NUMBER=${{ env.LATEST_PR }}
          PR_DETAILS=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json number,title,author,changedFiles,createdAt,mergedAt,body,url)
          echo "PR_DETAILS=$PR_DETAILS" >> $GITHUB_ENV

      - name: Store new Pull Request details
        run: |
          Version_Id=${{ env.new_version_id }}
          echo -e "\nMerged PR details: ${{ env.PR_DETAILS }}\nPackage Details: name:PackageTest Subscriber Version Id: $Version_Id" >> CHANGELOG.md
          git config user.name "release[bot]"
          git config user.email "<>"
          git add CHANGELOG.md
          git commit -m "Updating change log file"
          git push
