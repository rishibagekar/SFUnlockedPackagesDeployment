name: Pull Request to Develop

on:
  push:
    branches: [ develop, uat ]
    paths:
      - 'cmd-loader/main/default/**'
  pull_request:
    branches: [ develop, uat ]

jobs:
  authorize_sandbox:
    name: Authorization
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - name: Code Checkout
      uses: actions/checkout@v3
      with:
          ref: ${{github.head_ref }}
          fetch-depth: 0

    - name: Install Node JS
      uses: actions/setup-node@v3
      with:
          node-version: 18

    - name: Install SFDX CLI
      run: |
        npm install @salesforce/cli --global
        sf --version

    - name: Install jq
      run: |
        sudo apt-get install jq

    - name: DevHub - Authorization
      run: |
        echo ${{secrets.AUTHURL_COPADOPROD}} > ./AUTHURL_COPADOPROD.txt
        sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOPROD.txt -a devhub

    - name: Devint Sandbox - Authorization
      if: ${{ github.base_ref == 'develop' }}
      run: |
        echo ${{secrets.AUTHURL_COPADOINT}} > ./AUTHURL_COPADOINT.txt
        sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOINT.txt -a devint

    - name: UAT Sandbox - Validate & ApexCodeCoverageCheck
      if: ${{ github.base_ref == 'uat' }}
      run: |
        echo ${{secrets.AUTHURL_COPADOUAT}} > ./AUTHURL_COPADOUAT.txt
        sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOUAT.txt -a uat

  validate_pull_request:
    name: Validation
    needs: authorize_sandbox
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: ${{ github.head_ref }}
      TARGET_BRANCH: ${{ github.base_ref }}

    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
            node-version: 18

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Install sgd-delta
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins

      - name: Devint Sandbox- Validation
        if: ${{ github.base_ref == 'develop' }}
        run: |
          echo ${{secrets.AUTHURL_COPADOINT}} > ./AUTHURL_COPADOINT.txt
          sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOINT.txt -a devint
          mkdir changed-sources
          sfdx sgd:source:delta -a 60.0 --to "HEAD" --from "origin/develop" --output changed-sources/ --generate-delta
          echo -e "--- package.xml generated with added and modified metadata ---"
          cat changed-sources/package/package.xml
          echo "Package created successfully"
          sf project deploy start --dry-run --manifest changed-sources/package/package.xml -o devint --verbose
          sfdx force:apex:test:run -c -v -r human -l RunLocalTests -o devint -w 20
          sfdx force:apex:test:run -c -r json -d ./tests/apex -l RunLocalTests -o devint -w 20 > testcoverage.json
          coverage=$(jq .result.summary.orgWideCoverage testcoverage.json | grep -Eo "[[:digit:]]+")
          echo "Org Wide Code Coverage: $coverage"
          test $coverage -ge 75

      - name: UAT Sandbox- Validation
        if: ${{ github.base_ref == 'uat' }}
        run: |
          echo ${{secrets.AUTHURL_COPADOUAT}} > ./AUTHURL_COPADOUAT.txt
          sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOUAT.txt -a uat
          sf project deploy validate -d cmd-loader/main/default -o uat
          sfdx force:apex:test:run -c -v -r human -o uat -w 20
          sfdx force:apex:test:run -c -r json -d ./tests/apex -o uat -w 20 > testcoverage.json
          coverage=$(jq .result.summary.orgWideCoverage testcoverage.json | grep -Eo "[[:digit:]]+")
          echo "Org Wide Code Coverage: $coverage"
          test $coverage -ge 75

      - name: Generating Apex Code Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: apex-code-coverage
          path: tests/apex/test-result-codecoverage.json

  sonar-scan:
    needs: validate_pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Apex Code coverage Report
        uses: actions/download-artifact@v2
        with:
          name: apex-code-coverage
          path: tests/apex

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  deployment:
    name: deployment
    needs: authorize_sandbox
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Install Node JS
        uses: actions/setup-node@v3
        with:
            node-version: 18

      - name: Install SFDX CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Devint Sandbox- Deployment
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          echo ${{secrets.AUTHURL_COPADOPROD}} > ./AUTHURL_COPADOPROD.txt
          sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOPROD.txt -a devhub
          echo ${{secrets.AUTHURL_COPADOINT}} > ./AUTHURL_COPADOINT.txt
          sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOINT.txt -a devint
          sfdx force:package:version:create -x -p "CopadoPackage" -w 60 -v devhub -b develop --code-coverage
          new_version_id=$(grep -o "04t[[:alnum:]]\{15\}" sfdx-project.json | tail -n1)
          echo "version_id=${new_version_id}" >> $GITHUB_ENV
          test $(sfdx force:package:version:report -v devhub -p "$version_id" --json | jq .result.HasPassedCodeCoverageCheck) = 'true'
          sfdx force:package:install -p "$version_id" -u devint --wait 10 --publishwait 10

      - name: UAT Sandbox- Deployment
        if: ${{ github.ref == 'refs/heads/uat' }}
        run: |
          echo ${{secrets.AUTHURL_COPADOPROD}} > ./AUTHURL_COPADOPROD.txt
          sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOPROD.txt -a devhub
          echo ${{secrets.AUTHURL_COPADOUAT}} > ./AUTHURL_COPADOUAT.txt
          sfdx force:auth:sfdxurl:store -f ./AUTHURL_COPADOUAT.txt -a uat
          sfdx force:package:version:create -x -p "CopadoPackage" -w 60 -v devhub -b uat --code-coverage
          new_version_id=$(grep -o "04t[[:alnum:]]\{15\}" sfdx-project.json | tail -n1)
          echo "version_id=${new_version_id}" >> $GITHUB_ENV
          test $(sfdx force:package:version:report -v devhub -p "$version_id" --json | jq .result.HasPassedCodeCoverageCheck) = 'true'
          sfdx force:package:install -p "$version_id" -u uat --wait 10 --publishwait 10

      - name: Store new version id
        run: |
          sed -i -e "s/04t[[:alnum:]]\{15\}/${version_id}/" README.md
          git config user.name "release[bot]"
          git config user.email "<>"
          git add README.md
          git add sfdx-project.json
          git commit -m "Updating new pre-release version"
          git push